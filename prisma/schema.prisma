generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean       @default(false)
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  tests         Test[]        @relation("UserTests")
  testAttempts  TestAttempt[] @relation("UserTestAttempts")

  isAnonymous Boolean?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// ============================================================================
// MAKINPAHAM CORE TABLES - MVP
// ============================================================================

enum ContextType {
  TEXT
  FILE
  URL
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

model Test {
  id          String   @id @default(cuid())
  title       String
  description String?
  userId      String
  isPublic    Boolean  @default(false)
  shareCode   String?  @unique // For sharing with friends
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User          @relation("UserTests", fields: [userId], references: [id], onDelete: Cascade)
  contexts     TestContext[]
  questions    Question[]
  testAttempts TestAttempt[]

  @@index([userId])
  @@index([shareCode])
  @@map("test")
}

model TestContext {
  id        String      @id @default(cuid())
  testId    String
  type      ContextType
  content   String?     @db.Text // For TEXT type
  fileUrl   String? // For FILE type (S3/storage URL)
  fileName  String?
  url       String? // For URL type
  createdAt DateTime    @default(now())

  // Relations
  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@map("test_context")
}

model Question {
  id            String       @id @default(cuid())
  testId        String
  questionText  String       @db.Text
  questionType  QuestionType
  correctAnswer String // Stores correct answer(s)
  explanation   String?      @db.Text
  order         Int // Question order in test
  createdAt     DateTime     @default(now())

  // Relations
  test    Test             @relation(fields: [testId], references: [id], onDelete: Cascade)
  options QuestionOption[]
  answers Answer[]

  @@index([testId])
  @@map("question")
}

model QuestionOption {
  id          String   @id @default(cuid())
  questionId  String
  optionText  String
  optionOrder Int
  createdAt   DateTime @default(now())

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@map("question_option")
}

model TestAttempt {
  id             String        @id @default(cuid())
  testId         String
  userId         String? // Nullable for anonymous attempts
  score          Float? // Calculated score
  totalQuestions Int
  correctAnswers Int
  status         AttemptStatus @default(IN_PROGRESS)
  startedAt      DateTime      @default(now())
  completedAt    DateTime?
  createdAt      DateTime      @default(now())

  // Relations
  test    Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  user    User?    @relation("UserTestAttempts", fields: [userId], references: [id], onDelete: SetNull)
  answers Answer[]

  @@index([testId])
  @@index([userId])
  @@map("test_attempt")
}

model Answer {
  id            String   @id @default(cuid())
  testAttemptId String
  questionId    String
  userAnswer    String // Stores user's answer
  isCorrect     Boolean? // For auto-graded questions
  createdAt     DateTime @default(now())

  // Relations
  testAttempt TestAttempt @relation(fields: [testAttemptId], references: [id], onDelete: Cascade)
  question    Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([testAttemptId])
  @@index([questionId])
  @@map("answer")
}
